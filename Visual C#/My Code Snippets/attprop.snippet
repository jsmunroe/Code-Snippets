<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets  xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Change Handled Attached Dependency Property.</Title>
      <Shortcut>attprop</Shortcut>
      <Description>Code snippet for an Attached Dependency Property that handles change event.</Description>
      <Author>Jordan S. Munroe</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>int</Default>
        </Literal>
        <Literal>
          <ID>property</ID>
          <ToolTip>Property name</ToolTip>
          <Default>MyProperty</Default>
        </Literal>
        <Literal>
          <ID>container</ID>
          <ToolTip>Containing dependency object.</ToolTip>
          <Function>ClassName()</Function>
          <Default>MyDependencyObject</Default>
        </Literal>
        <Literal>
          <ID>comment</ID>
          <ToolTip>Comment text.</ToolTip>
          <Default>TODO: Add summary for this property.</Default>
        </Literal>
        <Literal>
          <ID>framework</ID>
          <ToolTip>Framework</ToolTip>
          <Default>Framework</Default>
        </Literal>
        <Literal>
          <ID>default</ID>
          <ToolTip>Default value.</ToolTip>
          <Default>null</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[public static readonly DependencyProperty $property$Property = DependencyProperty.RegisterAttached("$property$", typeof($type$), typeof($container$), new $framework$PropertyMetadata($default$, On$property$PropertyChanged));

        /// <summary>
        /// Get the value of the $property$ attached dependency property.
        /// </summary>
        /// <param name="ob">Dependency object containing the value.</param>
        /// <returns>Attached dependency property value.</returns>
        public static $type$ Get$property$(DependencyObject ob)
        {
            if (ob == null)
                return default($type$);

            var value = ob.GetValue($property$Property);

            if (value is $type$ == false)
                return default($type$);

            return ($type$)ob.GetValue($property$Property);
        }

        /// <summary>
        /// Set the value of the $property$ attached dependency property.
        /// </summary>
        /// <param name="ob">Dependency object containing the value.</param>
        /// <param name="value">Attached dependency property value.</param>
        public static void Set$property$(DependencyObject ob, $type$ value)
        {
            if (ob == null)
                return;

            ob.SetValue($property$Property, value);
        }

        /// <summary>
        /// When the $property$ property is changed.
        /// </summary>
        private void On$property$Changed()
        {

        }

        /// <summary>
        /// When the $property$Property dependency property is changed.
        /// </summary>
        private static void On$property$PropertyChanged(DependencyObject obj, DependencyPropertyChangedEventArgs e)
        {
            (obj as $container$).On$property$Changed();
        }
$end$]]>

      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>
